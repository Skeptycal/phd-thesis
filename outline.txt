 1. Introduction (general overview, contributions):
 2. Transition from a static VM to a live-object
	- master thesis as starting point
	- list the contributions of Pinocchio
	- bottom up approach of VM/Language runtime building
	- full control!
	- ...
	- list the major advantages of the Pinocchio approach
	- list the major drawbacks of the approach
	
 3. First simple preparations at language-side for better VM interaction: Reification:
	- unlike Pinocchio try a top-down approach
	- Inspectors
	- Reified concepts at language-side (VM / OSEnvironment / CLI?)
	- Interaction with the outer world (as an input the CLI might count here)
	- SLots paper? (used by toon, that makes this be a small section)

 4. Existing VM and language-elements that cross the barrier:
	- FFI
	- JIT
	- static approaches do not match the dynamic nature of the language
	- native boost, nabujito, waterfall
	
 5. Native Boost:
	- copy paper here
	
 6. Nabujito? (needs to be finished):
	- MISSSING validation!!

 7. Benefits of a Reflective and Interactive VM:
	- check with guido
	- 	
 8. Outlook (Mate):
 9. Conclusion:
